#!/bin/sh

# sup version
sup_ver="v4"
sup_mode="src" # src for source building，app for published.

export GOPROXY=https://goproxy.io # GOPROXY ON

# Checking depend
if [ -z "$PRJ_NAME" ]; then
    echo "\$PRJ_NAME NOT FOUND"
    exit 0
fi
if [ -z "$PRJ_ROOT" ]; then
    echo "\$PRJ_ROOT NOT FOUND"
    exit 0
fi

# Checking environment.
pwd_dir=""
app_name=""
app_path=""
cfg_name=""
cfg_end="ini"

resetCfgName(){
    pwd_dir="`pwd`"
    if [ ${#1} -gt 0 ]; then
        pwd_dir="$1"
    fi
    app_name="`basename $pwd_dir`"
    app_path="${pwd_dir#*$PRJ_ROOT\/}"
    if [ "$app_path" = "$pwd_dir" ]; then
        app_path=""
        cfg_name=${PRJ_NAME}
    else
        cfg_name="$PRJ_NAME.$(awk -v s=$app_path 'BEGIN{gsub("/",".",s);print s}')"
    fi
}

resetCfgName # init data


pub_root="$PRJ_ROOT/publish"
pub_dir="$pub_root/$PRJ_NAME"
pub_root_res="$PUB_ROOT_RES"
if [ -z "$pub_root_res" ] ; then
    pub_root_res="etc"
fi
pub_app_res="$PUB_APP_RES"
if [ -z "$pub_app_res" ] ; then
    pub_app_res="etc res public"
fi

sup_user=$SUP_USER
if [ -z "$SUP_USER" ] ; then
    sup_user=$USER
fi
sup_etc_dir="$SUP_ETC_DIR"
if [ -z "$SUP_ETC_DIR" ] ; then
    sup_etc_dir="/etc/supd/conf.d"
    # Auto detect kind of OS.
    case `uname` in
        "Linux")
            sup_etc_dir="/etc/supd/conf.d/"
            cfg_end="ini"
        ;;
        "Darwin")
            sup_etc_dir="/etc/supd/conf.d/"
            cfg_end="ini"
        ;;
        "*")
            "System not supported"
            exit 0
        ;;
    esac
fi

if [ "$(awk -v s=$sup_etc_dir 'BEGIN{print substr(s,length(s),1)}')" = "/" ]; then
    sup_etc_dir="${sup_etc_dir%?}"
fi

sup_log_dir="$PRJ_ROOT/var/log"
mkdir -p $sup_log_dir

sup_log_size="1MB"
if [ -n "$SUP_LOG_SIZE" ] ; then
    sup_log_size="$SUP_LOG_SIZE"
fi

sup_log_bak="10"
if [ -n "$SUP_LOG_BAK" ] ; then
    sup_log_bak="$SUP_LOG_BAK"
fi
sup_app_env="PRJ_ROOT=\\\"$PRJ_ROOT\\\",GIN_MODE=\\\"release\\\",LD_LIBRARY_PATH=\\\"$LD_LIBRARY_PATH\\\""
if [ -n "$SUP_APP_ENV" ] ; then
    sup_app_env="$SUP_APP_ENV"
fi

# call supevisorctl
callSup(){
    type supd >/dev/null 2>&1||{ echo >&2 "Aborted. \nRequire 'supd' but it's not found. \nGet supd from: https://github.com/gwaycc/supd/releases"; exit 0; }
    sudo supd ctl $*
}

startApp(){
    resetCfgName
    if [ $# -gt 0 ]; then
        callSup start $1 $2 $3 $4 $5 $6 $7 $8
    else
        callSup start $cfg_name
    fi
}

restartApp(){
    resetCfgName
    if [ $# -gt 0 ]; then
           callSup restart $1 $2 $3 $4 $5 $6 $7 $8
    else
        callSup restart $cfg_name
     fi
}

stopApp(){
    resetCfgName
    if [ $# -gt 0 ]; then
           callSup stop $1 $2 $3 $4 $5 $6 $7 $8
    else
        callSup stop $cfg_name
    fi
}

tailApp(){
    resetCfgName
    appName=$1
    if [ -z "$1" ]; then
        appName=$cfg_name
    fi
    end=$2
    if [ -z "$end" ]; then
        end="stdout"
    fi
    callSup tail $appName $end
}

tailfApp(){
    resetCfgName
    appName=$1
    if [ -z "$1" ]; then
        appName=$cfg_name
    fi
    end=$2
    if [ -z "$end" ]; then
        end="stdout"
    fi
    callSup tail -f $appName $end
}

supStatus(){
    echo "======================================================="
    echo "Using sup to manage process"
    echo "======================================================="
    callSup status|grep $PRJ_NAME
    echo "======================================================="
}

goBuild(){
    # go build
    if [ $# -gt 0 ]; then
        go build $1 $2 $3 $4 $5 $6 $7 $8 || exit 0
    else
        echo '#' "Building ($cfg_name)"
        go build || exit 0
    fi
}

goGet(){
    # go get package
    if [ $# -gt 0 ]; then
        go get -insecure -d -v $1 $2 $3 $4 $5 $6 $7 $8 || exit 0
    else
        echo '#' "Doing go get ($cfg_name) $1 $2 $3 $4 $5 $6 $7 $8"
        go get -insecure -d -v || exit 0
    fi
}

goUpdate(){
    # go get -u package
    if [ $# -gt 0 ]; then
        go get -insecure -d -v -u $1 $2 $3 $4 $5 $6 $7 $8 || exit 0
    else
        echo '#' "Doing go get ($cfg_name) -u $1 $2 $3 $4 $5 $6 $7 $8"
        go get -insecure -d -v -u || exit 0
    fi
}

# Building application.
# It need go into the directory of application and building.
buildApp() {
    resetCfgName
    goBuild $*
}


# Go mod
modApp(){
    resetCfgName
    echo '#' "Doing go mod ($cfg_name) $1 $2 $3 $4 $5 $6 $7 $8"
    go mod $*
}

# Go get
getApp(){
    resetCfgName
    goGet $*
}

# Go get -u
updateApp(){
    resetCfgName
    goUpdate $*
}

# Installing program to supd
installApp() {
    resetCfgName
    
    # build supd conf
    sudo mkdir -p $sup_etc_dir
    if [ -f "$sup_etc_dir/$cfg_name.$cfg_end" ]; then
        echo '#' "'$cfg_name' already exist, need clean at first"
        return 1
    fi
    
    if [ ! -f "$pwd_dir/$app_name" ]; then
        echo '#' "Not found '$cfg_name' binary command, need build at first"
        return 1
    fi
    
    echo '#' "Installing ($cfg_name)"
    # 设定supd的环境变量
    sudo sh -c "echo "[program:$cfg_name]" > $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "user=$sup_user" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "environment="$sup_app_env"" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "directory=$pwd_dir" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "command="$pwd_dir/$app_name $1 $2 $3 $4 $5 $6 $7 $8"" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "autostart=true" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "autorestart=true" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "startsecs=3" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "startretries=3" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "autorestart=true" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "exitcodes=0,2" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "stopsignal=TERM" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "stopwaitsecs=10" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "stdout_logfile=$sup_log_dir/$cfg_name.logfile.stdout" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "stdout_logfile_maxbytes=$sup_log_size" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "stdout_logfile_backups=$sup_log_bak" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "stderr_logfile=$sup_log_dir/$cfg_name.logfile.stderr" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "stderr_logfile_maxbytes=$sup_log_size" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "stderr_logfile_backups=$sup_log_bak" >> $sup_etc_dir/$cfg_name.$cfg_end"
    sudo sh -c "echo "" >> $sup_etc_dir/$cfg_name.$cfg_end"
    callSup reload
}

# Removing program from supd
cleanApp(){
    resetCfgName

    echo '#' "Cleaning (${cfg_name})"
    if [ -f "${sup_etc_dir}/${cfg_name}.${cfg_end}" ]; then
        callSup stop $cfg_name
        sudo rm ${sup_etc_dir}/${cfg_name}.${cfg_end}
        callSup reload
    else
        echo "Not found: ${sup_etc_dir}/${cfg_name}.${cfg_end}"
    fi
}

# Packaging binary mode.
publishApp(){
    resetCfgName
    echo '#' "Publishing $cfg_name to $pub_dir"
    if [ -f "./publish.sh" ]; then
        echo "# Calling publish.sh"
        sh ./publish.sh
    fi

    rm -rf $pub_dir/$app_path||exit 0
    # Collecting resource
    for d in $pub_app_res
    do
        if [ -d $pwd_dir/$d ]; then
            mkdir -p $pub_dir/$app_path||exit 0
            cp -rf $pwd_dir/$d $pub_dir/$app_path||exit 0
            continue
        fi
        if [ -f $pwd_dir/$d ]; then
            mkdir -p $pub_dir/$app_path||exit 0
            cp -rf $pwd_dir/$d $pub_dir/$app_path||exit 0
            continue
        fi
    done
    # Collecting binary
    if [ -f ./$app_name ];then
        mkdir -p $pub_dir/$app_path||exit 0
        cp $app_name $pub_dir/$app_path||exit 0
    fi

    mkdir -p $pub_dir/bin
    cp -rf $PRJ_ROOT/env.sh $pub_dir/||exit 0
    cp -rf $(dirname $0)/sup $pub_dir/bin/||exit 0
    if [ `uname` = "Darwin" ]; then
        sed -i "" "s/sup_mode=\"src\"/sup_mode=\"app\"/g" $pub_dir/bin/sup||exit 0
    else
        sed -i "s/sup_mode=\"src\"/sup_mode=\"app\"/g" $pub_dir/bin/sup||exit 0
    fi

    # Collection root resource
    for d in $pub_root_res
    do
        if [ -d $PRJ_ROOT/$d ]; then
            mkdir -p $pub_dir/$d||exit 0
            cp -rf $PRJ_ROOT/$d $pub_dir/||exit 0
        fi
        if [ -f $PRJ_ROOT/$d ]; then
            cp -rf $PRJ_ROOT/$d $pub_dir/ || exit 0
        fi
    done
}

reCmd(){
    # backup current directory.
    currdir=`pwd`
    buildp=$currdir
    args="$2 $3 $4 $5 $6 $7 $8"
    
    case "$2" in
        "all"|"all-noproxy")
            if [ "$2" = "all-noproxy" ] ; then
                export GOPROXY="" # using no goproxy
            fi

            buildp=$BUILD_ALL_PATH
            # Spec for publish
            if [ "$1" = "publish" ]; then
                rm -rf $pub_dir||exit 0
            fi
            # rebuild args
            args="$3 $4 $5 $6 $7 $8"
            ;;
    esac
    
    for a in $buildp
    do
        if [ -d $a ]; then
            cd $a
            case "$1" in
                 "start")
                         startApp $args
                         ;;
                 "stop")
                         stopApp $args
                         ;;
                 "restart")
                         restartApp $args
                         ;;
                 "tail")
                         tailApp $args
                         ;;
                 "tailf")
                         tailfApp $args
                         ;;
                 "build")
                         buildApp $args
                         ;;
                 "mod")
                        modApp $args
                        ;;
                 "get")
                         getApp $args
                         ;;
                 "install")
                         installApp $args
                         ;;
                 "update")
                         updateApp $args
                         ;;
                 "clean")
                         cleanApp $args
                         ;;
                 "publish")
                         publishApp $args
                         ;;
            esac
        fi
    done
    
    cd $currdir
}


# shell参数入口
case "$1" in 
    "start"|"stop"|"restart"|"tail"|"tailf"|"install"|"clean")
        reCmd $*
        exit 0
    ;;
    "build"|"mod"|"get"|"update"|"publish")
        if [ "$sup_mode" = "app" ]; then
            echo '#' "Can not use the command in published mode"
            exit 0
        fi
        reCmd $*
        exit 0
    ;;

    ""|"help")
        # TODO:英文化
       echo "此脚本集成go mod、supd来管理项目，以下常用管理指令，以下指令之外的请使用源程序指令构建补充"
       echo ""
       echo "以下是编译使用的指令："
       echo "sup get # 使用GOPROXY下载当前目录下的go get依赖, 相当于GOPROXY=\"\" && go get -v"
       echo "sup get all # 使用GOPROXY依次下载env.sh的\$BUILD_ALL_PATH路径下的go get依赖"
       echo "sup get all-noproxy # 关闭GOPROXY依次下载env.sh的\$BUILD_ALL_PATH路径下的go get依赖"
       echo "sup update # 使用GOPROXY更新当前目录下的go get依赖，相当于GORPOXY=\"\" && go get -v -u"
       echo "sup update all # 使用GOPROXY使用最新的库编译env.sh的\$BUILD_ALL_PATH路径下的程序"
       echo "sup update all-noproxy # 关闭GOPROXY，使用最新的库编译env.sh的\$BUILD_ALL_PATH路径下的程序"
       echo "sup build # 使用GOPROXY, go build当前目录的main程序, 支持参数扩展"
       echo "sup build all # 依次编译env.sh的\$BUILD_ALL_PATH路径下的程序, 使用GOPROXY进行go build"
       echo "sup build all-noporxy # 依次编译env.sh的\$BUILD_ALL_PATH路径下的程序,关闭GOPROXY进行go build"
       echo ""
       echo "以下是管理依赖的指令"
       echo "sup mod # 下载依赖或初始化依赖，若未初始化过，则执行初始化工作，同go mod"
       echo ""
       echo "以下是部署使用的指令："
       echo "sup status 查看当前工程的部署运作情况"
       echo "sup install [app_args] # 安装当前目录程序的supd配置文件, 若运行时需要参数，请填写"
       echo "sup install all # 使用GOPROXY安装env.sh的\$BUILD_ALL_PATH路径下程序的supd配置文件，该指令暂未支持运行参数传递"
       echo "sup install all-noproxy # 关闭GOPROXY安装env.sh的\$BUILD_ALL_PATH路径下程序的supd配置文件，该指令暂未支持运行参数传递"
       echo "sup clean # 清理当前目录的发布环境"
       echo "sup clean all # 依次清理env.sh的\$BUILD_ALL_PATH路径下的发布环境"
       echo "sup publish # 发布为非源码部署, 若该目录下存在publish.sh, 将优先调用后继续打包。"
       echo "sup publish all # 依次对\$BUILD_ALL_PATH路径下进行publish操作。"
       echo "sup start # 启动当前目录的程序(supd ctl start \$cfg_name)"
       echo "sup start all # 依次启动env.sh的\$BUILD_ALL_PATH路径下的程序"
       echo "sup restart # 重启当前目录的程序(supd ctrl restart \$cfg_name)"
       echo "sup restart all # 依次重启env.sh的\$BUILD_ALL_PATH路径下的程序"
       echo "sup stop # 停止当前目录的程序(supd ctrl stop \$cfg_name)"
       echo "sup stop all # 依次停止env.sh的\$BUILD_ALL_PATH路径下的程序"
       echo "sup tail [\$cfg_name stdout] # 查看当前目录[应用]状态0的控制台输出，等价于 supd ctrl tail \$cfg_name stdout"
       echo "sup tailf [\$cfg_name stdout] # 查看当前目录[应用]状态0的控制台输出，等价于 supd ctrl tail -f \$cfg_name stdout"
       echo ""
       echo "以下是公开可配的环境变量说明"
       echo "\$PRJ_NAME # 项目英文名称,必须,用于脚本中的项目名称生成, 例如:testing"
       echo "\$PRJ_ROOT # 项目工作根目录,必须,用于项目资源寻址, 例如:/root"
       echo ""
       echo "\$PUB_ROOT_RES # 发布时收集的项目根目录资源文件夹名, 未填写时默认:etc"
       echo "\$PUB_APP_RES # 发布时应用当前目录下的资源文件夹名, 未填写时默认:res public"
       echo ""
       echo "\$SUP_ETC_DIR # 使用supd的配置文件时生成的supd目录, 未填写时默认:/etc/supd/conf.d"
       echo "\$SUP_LOG_SIZE # 使用supd时配置文件的maxbytes值,未填写时默认1M"
       echo "\$SUP_LOG_BAK # 使用supd时配置文件的backups数量,未填写时默认10"
       exit 0
    ;;
    "status")
        supStatus
        exit 0
    ;;
    "version")
        echo  "sup versoin:" $sup_ver
        exit 0
    ;;
    *)
        echo '#' "Unsupport command '$*', you can use offical command to do it."
        exit 0
    ;;
esac

